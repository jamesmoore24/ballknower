"use strict";(()=>{var e={};e.id=678,e.ids=[678],e.modules={524:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},1249:(e,r,t)=>{t.r(r),t.d(r,{headerHooks:()=>m,originalPathname:()=>P,requestAsyncStorage:()=>T,routeModule:()=>c,serverHooks:()=>A,staticGenerationAsyncStorage:()=>R,staticGenerationBailout:()=>v});var a={};t.r(a),t.d(a,{GET:()=>p}),t(5655);var o=t(2482),s=t(4647),n=t(6886);let i=require("better-sqlite3");var u=t.n(i);let d=process.env.BALLKNOWER_DB_PATH||"ballknower.db",l=new(u())(d);async function p(){try{let e=l.prepare("SELECT * FROM bets ORDER BY created_at DESC").all();return n.Z.json({entries:e})}catch(e){return console.error("Error fetching entries:",e),n.Z.json({error:"Failed to fetch entries"},{status:500})}}l.exec(`
  CREATE TABLE IF NOT EXISTS bets (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    team TEXT,
    odds REAL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  )
`);let E=o.AppRouteRouteModule,c=new E({definition:{kind:s.x.APP_ROUTE,page:"/api/entries/route",pathname:"/api/entries",filename:"route",bundlePath:"app/api/entries/route"},resolvedPagePath:"/Users/jamesmoore/Documents/ballknower/app/api/entries/route.ts",nextConfigOutput:"",userland:a}),{requestAsyncStorage:T,staticGenerationAsyncStorage:R,serverHooks:A,headerHooks:m,staticGenerationBailout:v}=c,P="/api/entries/route"}};var r=require("../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),a=r.X(0,[303],()=>t(1249));module.exports=a})();